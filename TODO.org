#+TODO: TODO(t) POSIBLE(p) POSSIBLE(p) GOING(g) FUTURE(f) | DONE(d!) CANCELED(c!)

* POSIBLE Plantearse poner estos footnotes al paper de uc3m
Austria\footnote{https://www.wien.gv.at},
Australia\footnote{https://data.sa.gov.au},
Belgium\footnote{https://statbel.fgov.be/},
Canada\footnote{https://open.alberta.ca/},
Denmark\footnote{https://www.dst.dk/en},
Germany\footnote{https://offenedaten-koeln.de/dataset/vornamen},
Spain\footnote{https://www.ine.es/},
Finland\footnote{https://www.avoindata.fi/},
France\footnote{https://www.insee.fr/},
Great
Britain\footnote{https://www.ons.gov.uk/},
Ireland\footnote{https://data.gov.ie/},
Mexico\footnote{http://datamx.io/},
New
Zealand\footnote{https://smartstart.services.govt.nz/news/baby-names},
Portugal\footnote{http://centraldedados.pt/nomes\_proprios/} and
Slovenia\footnote{https://pxweb.stat.si/}.

* DONE gsoc applications open March 25, 2019 at 19:00
  SCHEDULED: <2019-03-25 lun 19:00>
  - State "DONE"       from "TODO"       [2019-06-07 vie 15:58]
* DONE Reflexionar la manera de nombrar las clases
  SCHEDULED: <2018-12-11 mar>
  - State "DONE"       from "TODO"       [2018-12-11 mar 16:12]
* DONE Hacer comparativa de clasificadores
  - State "DONE"       from "TODO"       [2019-02-17 dom 17:09]
** DONE Crear métodos de accuracy y confusion_matrix
   - State "DONE"       from "TODO"       [2018-11-15 jue 11:53]
** DONE Escribir la clase gender genérica desde lo aprendido en la clase sexmachine
   - State "DONE"       from "TODO"       [2018-12-14 vie 21:21]
Por ahora valdría con llegar a migrar los métodos necesarios hasta ejecutar accuracy y confusion matrix
** DONE Reescribir todas las clases api heredando de gender
   - State "DONE"       from "TODO"       [2019-01-18 vie 13:16]
** DONE Crear los accuracy de los clasificadores, compararlos entre ellos y con las apis
   - State "DONE"       from "TODO"       [2019-02-17 dom 17:09]
* DONE Estudiar las relaciones entre las variables escogidas
  - State "DONE"       from "TODO"       [2018-12-03 lun 15:58]
Mirar python-examples/matplotlib/corr.py
* TODO Crear un método que dada una cadena con varios substrings separados por espacios en blancos y quizás comas determinar nombre y apellido
** TODO Una primera aproximación puede ser por número de ocurrencias y orden
En español es frecuente encontrar:
+ [ ] nombre1 apellido1 apellido2
+ [ ] nombre1 nombre2 apellido1 apellido2
+ [ ] apellido1 apellido2, nombre1 
+ [ ] apellido1 apellido2, nombre1 nombre2
** TODO Otra aproximación puede ser crear una tarea de aprendizaje y aplicar ML 
** DONE Crear método guess_surname
   - State "DONE"       from "TODO"       [2018-11-22 jue 16:12]
** TODO Recuperar datasets universales de apellidos
Mientras solo tengamos datasets de inglés y español, solo es posible
hacer algo similar al primer artículo, pero con nombres y apellidos
* DONE Hacer los test requeridos para string2array
  - State "DONE"       from "TODO"       [2018-11-15 jue 11:52]
* DONE Meter en guess todos los clasificadores
  - State "DONE"       from "FUTURE"     [2018-12-14 vie 21:21]
    def guess(self, name, classifier_type):
    # guess method to check names dictionary and nltk classifier
        guess = ''
        if name in names.words('male.txt'):
#            guess = 'male' # 1
            guess = np.array([1])
        elif name in names.words('female.txt'):
#            guess = 'female' # 0
            guess = np.array([0])
        else:
           if (classifier_type == 'gaussianNB'):
               m = self.bernoulliNB()
               guess = m.predict([[ 0,  0,  1,  0, 21,  0,  0,  0,  0, 34,  2,  0,  0,  0,  0,  0, 0,  0,  0,  5,  0,  0,  0,  0,  0,  2,  0,  0,  0, 34,  1,  0]])
           elif (classifier_type == 'multinomialNB'):
               m = self.multinomialNB()
               guess = m.predict([[ 0,  0,  1,  0, 21,  0,  0,  0,  0, 34,  2,  0,  0,  0,  0,  0, 0,  0,  0,  5,  0,  0,  0,  0,  0,  2,  0,  0,  0, 34,  1,  0]])
           elif (classifier_type == 'bernoulliNB'):
               m = self.bernoulliNB()
               guess = m.predict([[ 0,  0,  1,  0, 21,  0,  0,  0,  0, 34,  2,  0,  0,  0,  0,  0, 0,  0,  0,  5,  0,  0,  0,  0,  0,  2,  0,  0,  0, 34,  1,  0]])
           else: # nltk default
               classifier = self.classifier()
               guess = classifier.classify(self.features(name))
        return guess
* DONE Plantearse renombrarlo a damegender
  SCHEDULED: <2018-11-16 vie>
  - State "DONE"       from "TODO"       [2018-12-10 lun 12:55]
* DONE guess en Gendernamsor
  - State "DONE"       from "TODO"       [2018-12-03 lun 15:58]
    # def guess(Gender, name, surname, binary=False):
    # # guess method to check names dictionary and nltk classifier
    #     guess = super(Gender, self).gender()
    #     guess = ''
    #     if name in names.words('male.txt'):
    #         if binary:
    #             guess = 1
    #         else:
    #             guess = 'male'
    #     elif name in names.words('female.txt'):
    #         if binary:
    #             guess = 0
    #         else:
    #             guess = 'female'
    #     else:
    #         r = requests.get('https://api.namsor.com/onomastics/api/json/gender/'+ name +'/' + surname)
    #         d = json.loads(r.text)
    #         if binary:
    #             if (d['gender']=='female'):
    #                 guess = 0
    #             elif (d['gender']=='male'):
    #                 guess = 1
    #             else:
    #                 guess = 2
    #         else:
    #             guess = d['gender']
    #     return guess
* DONE Escribir comando para adivinar un nombre
  - State "DONE"       from "TODO"       [2018-11-19 lun 19:18]
* DONE Escribir comando git2gender.py
  SCHEDULED: <2018-11-20 mar>
  - State "DONE"       from "TODO"       [2018-11-22 jue 16:12]
Dada una url obtener número y porcentaje de hombres y mujeres
** DONE Escribir método string2name
   - State "DONE"       from "TODO"       [2020-12-06 dom 23:03]
Finalmente, se implementó como string2array y identity2name_email
* DONE Escribir comando gender2csv.py
  SCHEDULED: <2018-11-20 mar>
  - State "DONE"       from "TODO"       [2018-11-22 jue 16:12]
Dado un fichero csv obtener número y porcentaje de hombres y mujeres
* DONE Hay un problema con los acentos
  - State "DONE"       from "TODO"       [2018-11-22 jue 08:30]
Probar
$ python3 main.py Inés
$ python3 main.py Ines
* DONE Hay un problema con los nombres que aparecen en male.txt y female.txt
  - State "DONE"       from "FUTURE"     [2020-03-21 sáb 18:48]
Probar
$ python3 main.py Andrea
Para esto lo mejor es devolver una probabilidad. Usar INE.es puede ser una opción.
* DONE Meter en el requirements la dependencia de hyphenation
  SCHEDULED: <2018-11-20 mar>
  - State "DONE"       from "TODO"       [2018-11-22 jue 16:11]
* DONE Reescribir num_males y num_females con el método list_commiters de GenderGit
  SCHEDULED: <2018-11-22 jue>
  - State "DONE"       from "TODO"       [2018-11-22 jue 16:10]
* DONE Escribir tests para main.py, csv2gender y git2gender
  SCHEDULED: <2018-11-23 vie>
  - State "DONE"       from "TODO"       [2018-11-29 jue 09:48]
* DONE Para csv2gender:
  - State "DONE"       from "FUTURE"     [2020-07-06 lun 23:03]
** en file deberías reconocer:
+ [ ] formato csv
+ [ ] tiene las rows importantes
** en sexmachine
+ [ ] trabajar por path en vez de all y partial
+ [ ] detectar si el fichero existe
* DONE Echar un vistazo a https://www.nameapi.org/en/developer/
  - State "DONE"       from "TODO"       [2019-01-23 mié 16:00]
* DONE En csv
  - State "DONE"       from "TODO"       [2018-12-03 lun 15:57]
  first_letter; last_letter; a; b; c; d; e; f; g; h; i; j; k; l; m; n; o; p; q; r; s; t; u; v; w; x; y; z; vocals; consonants; first_letter_vocal; last_letter_vocal; syllables
_* TODO Mejora corr.py para determinar si las variables son independientes
+ [X] Separar variables categóricas y no categóricas
+ [ ] Crear una gráfica para variables categóricas
+ [ ] Crear una gráfica para variables no categóricas
* DONE Lanzar los accuracy para determinar la mejor herramienta de género
  - State "DONE"       from "TODO"       [2019-02-17 dom 17:08]
+ [X] sexmachine
+ [X] namsor
+ [ ] genderguesser
+ [ ] genderapi
+ [ ] genderize

Hay un problema que accuracy parece que usa el guess padre y no la instancia, ya que devuelve el mismo resultado en todos
* DONE Para mejorar accuracy es bueno incluir en male.txt y female.txt los nombres de ine.es
  SCHEDULED: <2018-12-22 sáb>
  - State "DONE"       from "TODO"       [2019-01-04 vie 20:21]
* DONE Escribir api2gender.py dada una api y un nombre, extraer el género y la probabilidad si la da la api
  SCHEDULED: <2018-12-13 jue>
* DONE Reemplazar DameSexmachine heredando de Gender
  - State "DONE"       from "TODO"       [2018-12-14 vie 21:18]
* DONE Usar pickle para los algoritmos de scikit, ayudará a que ejecutar tests no sea un infierno
  - State "DONE"       from "TODO"       [2019-01-02 mié 20:26]
+ [X] damemodels.py
+ [X] hacer tests usando pickle

#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (C) 2018  David Arroyo Menéndez

# Author: David Arroyo Menéndez <davidam@gnu.org>
# Maintainer: David Arroyo Menéndez <davidam@gnu.org>

# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.

# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA,

import csv
import requests
import json
from app.dame_gender import Gender


class DameGenderApi(Gender):
    def guess(self, name):
        fichero = open("files/genderapipass.txt", "r+")
        contenido = fichero.readline()
        r = requests.get('https://gender-api.com/get?name='+name+'&key='+contenido)
        j = json.loads(r.text)
        return j['gender']

* DONE males_list and females_list
  - State "DONE"       from "TODO"       [2018-12-23 dom 17:33]
* DONE Guess
  SCHEDULED: <2018-12-24 lun>
  - State "DONE"       from "TODO"       [2018-12-23 dom 19:24]
    def guess(self, name, binary=False):
    # guess method to check names dictionary
        guess = ''
        name = unidecode.unidecode(name).title()
        name.replace(name,"")
        m = self.males_list()
        f = self.females_list()
        if (name in m) and (name in f):
            if binary:
                guess = 2
            else:
                guess = 'unknown'
        elif name in m:
            if binary:
                guess = 1
            else:
                guess = 'male'
        elif name in f:
            if binary:
                guess = 0
            else:
                guess = 'female'
        else:
            if binary:
                guess = 2
            else:
                guess = 'unknown'
        return guess
* DONE A comentar
  - State "DONE"       from "TODO"       [2019-01-23 mié 15:57]
** Cambiar foto
+ [ ] http://miportal.urjc.es/portal/page/portal/gp_uxxiportal_academico/pg_mis_datos_personales
+ [ ] https://soporte.urjc.es/servicedesk/customer/portal/2/URJC-46086
+ [ ] Ir a Escuela Internacional de Docotorado
** package
** Generar inercia para ingresar dinero con coherencia de ganar dinero con los objetivos del doctorado
Escogimos como primer productividad, lo hemos hablado a urjc así, tenemos que mejorar en este aspecto
** Problemas de no pagar APIs con all.csv:
+ [ ] GenderAPI: your request volume is exhausted but your server is still making requests.
+ [ ] Genderize: Request limit too low to process request
+ [ ] Genderguesser: tener en cuenta el caso andy 'andy', 1, 2, 0, 1, 1, 1]
** Baby name guesser usa google para determinar si alguien es chico o chica
Supongo que podría ser el número de resultados en Google "name female", "name male"
** infofeatures.py
** Charla Bitergia
+ [ ] Contenidos
+ [ ] Posibilidad de comentarlo en GAPLEN
** NLTK en Medialab
** CLEF and ICSE
** Beca e INEM
** Revisión de métodos en clases
** Variables categóricas y no categóricas
** Estadística facultad de mates
* DONE Para main.py
  - State "DONE"       from "TODO"       [2018-12-24 lun 12:59]
if (len(sys.argv) > 1):
    if (args.ml):
        s = DameSexmachine()
        m = s.sgd_load()
        predicted = m.predict([[ 0,  0,  1,  0, 21,  0,  0,  0,  0, 34,  2,  0,  0,  0,  0,  0, 0,  0,  0,  5,  0,  0,  0,  0,  0,  2,  0,  0,  0, 34,  1,  0, 1]])
        sex = ""
        if predicted:
            sex = "male"
        else:
            sex = "female"
        print("%s gender is %s" % (str(args.name), sex))
    else:
        print("%s gender is %s" % (str(args.name), s.guess(args.name)))
* DONE Charla en Bitergia
  SCHEDULED: <2019-01-25 vie 11:00>
  - State "DONE"       from "TODO"       [2019-02-14 jue 18:28]
Title: damegender: a gender detection tool
Summary:
Nowadays, there are different api gender detection tool in the current state damegender is providing a way to use some of these apis and it's providing another way to know if a string is a name of a male or a female. Although, the dictionary is so important, we can discuss about features to detect the gender and machine learning algorithms to improve the software.
api google python
* DONE accuracy is buggy, you can write your own version
  SCHEDULED: <2019-01-15 mar>
  - State "DONE"       from "TODO"       [2019-01-16 mié 16:39]
* DONE dada una feature contar apariciones en aciertos y apariciones en fallos
  - State "DONE"       from "TODO"       [2019-02-17 dom 17:08]
* DONE escribir guess_list en genderapi
  SCHEDULED: <2019-01-15 mar>
  - State "DONE"       from "TODO"       [2019-01-16 mié 16:39]
GET https://gender-api.com/get?name=lisa;jess;thomas&multi=true&key=<your private server key>
* DONE hay métodos comentados y etiquetados como obsoletos, ir eliminando
  - State "DONE"       from "TODO"       [2019-01-18 vie 10:41]
* DONE comprobar métodos que puedan estar en varias clases están con una adecuada herencia, DRY!
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:35]
** DONE guess_surname
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:35]
** DONE string2array
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:35]
** DONE string2gender
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:35]
* DONE https://en.wikipedia.org/wiki/Precision_and_recall
  SCHEDULED: <2019-01-16 mié>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:34]
Escribir el código de todas las posibilidades que se dan.
* DONE Plantearse introducir la feature all_syllables. Esto vendría bien para decidir si es o no un nombre
  - State "DONE"       from "TODO"       [2019-04-26 vie 22:38]
Lo relacionado con syllables. Lo dejamos para cuando se detecte el origen geográfico.
Las sílabas dependen del idioma.
* DONE Introducir la feature in_dict. Esto vendría bien para decidir si es o no un nombre
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:36]
python-examples/shell/eng2spa.py
davidam@libresoft ~/git/python-examples/shell: (dev) $ python3 spa2eng.py David | grep "No definitions"
No definitions found for "David"
davidam@libresoft ~/git/python-examples/shell: (dev) $ python3 spa2eng.py Tabla | grep "No definitions"
davidam@libresoft ~/git/python-examples/shell: (dev) $
* CANCELED Pensar en una o varias features other_apis
  - State "CANCELED"   from "TODO"       [2019-08-03 sáb 15:59]
* DONE Empezar Artículo
  - State "DONE"       from "TODO"       [2019-03-13 mié 17:55]
** DONE Elección features
   - State "DONE"       from "TODO"       [2019-03-13 mié 17:55]
+ [X] Last letter a
+ [X] Last letter consonant
+ [X] Last letter vocal
+ [X] Other apis. Ver api2gender.py --api="average" David
+ [X] Google. Ver main2.py y gendergoogle.py
** DONE guess method and ml
   - State "DONE"       from "TODO"       [2019-02-17 dom 17:10]
** DONE Resultados $ python3 accuracy.py --csv="files/all.csv"
   - State "DONE"       from "TODO"       [2019-02-17 dom 17:10]
*** DONE Namsor
	- State "DONE"       from "TODO"       [2019-02-17 dom 17:09]
0.7539570378745054
*** DONE Genderguesser
	- State "DONE"       from "TODO"       [2019-02-17 dom 17:09]
0.6902204635387225
*** DONE Genderize
	- State "DONE"       from "TODO"       [2019-02-17 dom 17:09]
Genderize accuracy: 0.715375918598078
*** DONE Genderapi
	- State "DONE"       from "TODO"       [2019-02-17 dom 17:09]
Necesitamos licencia para lanzarlo
*** DONE Sexmachine
	- State "DONE"       from "TODO"       [2019-02-17 dom 17:09]
Sexmachine accuracy: 0.6677501413227812
*** DONE Nameapi
	- State "DONE"       from "TODO"       [2019-02-17 dom 17:10]
	Necesitamos licencia para lanzarlo
* DONE Resulados $ python3 confusion.py --csv="files/all.csv"
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:56]
** DONE Namsor
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:56]
** DONE Genderguesser
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:56]
davidam@libresoft ~/git/damegender: (dev) $ python3 confusion.py --api="genderguesser" --csv="files/all.csv"
A confusion matrix C is such that Ci,j is equal to the number of observations known to be in group i but predicted to be in group j.
If the classifier is nice, the diagonal is high because there are true positives
Gender Guesser confusion matrix:
 [[1519   55  394]
 [  68 2956  787]
 [ 257  630  410]]
** DONE Sexmachine
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:56]
 $ python3 confusion.py --api="sexmachine" --csv="files/all.csv"
A confusion matrix C is such that Ci,j is equal to the number of observations known to be in group i but predicted to be in group j.
If the classifier is nice, the diagonal is high because there are true positives
Sexmachine confusion matrix:
 [[1692  276    0]
 [ 778 3033    0]
 [ 589  708    0]]

* TODO Escribir y probar average para api2gender
* TODO Escribir la desviación típica en la elección de male or female
  SCHEDULED: <2019-02-24 dom>
* TODO Escribir average_weighted
Dado un nombre, tenemos la frecuencia del nombre y la población en
tres datasets, crear la media ponderada.
** DONE Descargar json de las diferentes apis
   - State "DONE"       from "TODO"       [2020-02-05 mié 17:20]
* DONE Entrada http://t3chfest2019.eventbrite.es
  SCHEDULED: <2019-01-28 lun 10:30>
  - State "DONE"       from "TODO"       [2019-02-14 jue 18:26]
* DONE T3chfest
  SCHEDULED: <2019-03-14 jue>
  - State "DONE"       from "TODO"       [2019-04-26 vie 22:36]
* DONE Crear argumento api para accuracy y confusion
  SCHEDULED: <2019-01-21 lun>
  - State "DONE"       from "TODO"       [2019-01-23 mié 15:55]
* DONE Reescribir confusion2, confusion matrix como en el artículo pag 17
  SCHEDULED: <2019-01-23 mié>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:36]
** Namsor
 $ python3 confusion2.py --csv="files/all.csv" --api="namsor"
A confusion matrix C is such that Ci,j is equal to the number of observations known to be in group i but predicted to be in group j.
If the classifier is nice, the diagonal is high because there are true positives
[[ 1686, 78, 204]
 [ 139, 3326, 346]]

* DONE Comenzar a escribir artículo
  SCHEDULED: <2019-01-24 jue>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:37]
* DONE Tratar de comentar la negación a la beca
  SCHEDULED: <2019-01-24 jue>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:37]
* DONE A comentar
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:44]
** DONE Gsoc, registro, perceval, scikit o nltk
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:37]
** DONE Nameapi
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:37]
** CANCELED Enseñar a usar el org-agenda
   - State "CANCELED"   from "TODO"       [2019-02-17 dom 16:38]
** DONE Ordenar el código
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:38]
+ [X] accuracy-ml
+ [X] confusion y confusion2
** DONE Goals artículo
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:38]
*** DONE Elección de features (análisis multivariante)
	- State "DONE"       from "TODO"       [2019-02-17 dom 16:38]
*** DONE ML
	- State "DONE"       from "TODO"       [2019-02-17 dom 16:38]
** DONE Ver tarea artículo
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:38]
** DONE Artículos a leer
   - State "DONE"       from "TODO"       [2019-02-17 dom 16:39]
+ [X] Artículos de Alexander para estado del arte
+ [X] https://www.sciencedirect.com/science/article/pii/S1742287611000247
given a short text document, can we identify if the author is a man or a woman?
+ [X] https://arxiv.org/pdf/1603.04322.pdf
Es muy parecido al artículo de "Comparison and benchmark of name-to-gender inference services".
+ [X] https://peerj.com/articles/cs-156/
+ [X] https://dl.acm.org/citation.cfm?id=3274357
** TODO 20 Years of Open Source—Impact on Software Engineering Practice: Call for Papers
https://publications.computer.org/software-magazine/2018/07/25/20-years-open-source-impact-software-engineering-practice-call-papers/
* DONE Nameapi
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:39]
- ['unknown',
+ ['male',
   'male',
   'male',
   'male',
-  'unknown',
+  'male',
   'male',
   'female',
   'female',
   'male',
   'male',
   'male',
   'male',
   'male',
   'male',
-  'unknown',
+  'neutral',
   'male',
   'male',
   'male',
   'female',
   'male',
-  'unknown']
+  'male']
* DONE Artículo
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:40]
** Introduction
*** State of Art
* DONE Escribir accuracy de machine learning methods
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:40]
* DONE Escribir confusion de machine learning methods
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:40]
* DONE Elección de features
  - State "DONE"       from "GOING"      [2019-12-03 mar 18:17]
** DONE Sentido Común (infofeatures.py)
   - State "DONE"       from "TODO"       [2019-08-03 sáb 15:53]
Se hizo una versión extendida de infofeatures.py (hasta versión 0.1.9 de pip)
Dió los siguientes resultados:

davidam@libresoft ~/git/damegender/src/damegender: (master) $ python3 infofeatures.py
---------------------------------------------------------------
Females with letter/s a: 0.7346828401452523
Males with letter/s a: 0.6176225471626638
---------------------------------------------------------------
Females with last letter a: 0.4705246078961601
Males with last letter a: 0.16910371997878626
---------------------------------------------------------------
Females with last letter o: 0.017306652244456464
Males with last letter o: 0.10758390787180847
---------------------------------------------------------------
Females with last letter consonant: 0.2735841767750908
Males with last letter consonant: 0.48738540798545343
---------------------------------------------------------------
Females with last letter vocal: 0.7262612995441552
Males with last letter vocal: 0.5123115387529358
---------------------------------------------------------------
---------------------------------------------------------------
there are 12943 females
first letter females dictionary:
a  :: 0.10090396353241134
m  :: 0.08946921115660975
s  :: 0.07602565093100518
c  :: 0.06227304334389245
l  :: 0.056941976357876845
e  :: 0.04890674495866491
n  :: 0.048597697597156764
d  :: 0.047902341033763424
j  :: 0.04566174766282933
r  :: 0.044116510855288574
k  :: 0.03793556362512555
b  :: 0.03770377810399444
g  :: 0.03639032681758479
y  :: 0.03530866105230627
h  :: 0.03229544927760179
i  :: 0.03229544927760179
t  :: 0.03160009271420845
f  :: 0.027350691493471375
p  :: 0.02263771923047207
v  :: 0.0202426021787839
o  :: 0.016843081202194236
z  :: 0.016456772000309046
x  :: 0.013366298385227536
w  :: 0.010971181333539365
u  :: 0.004094877539983002
q  :: 0.0036313064977207756
ñ  :: 0.0
---------------------------------------------------------------
there are 13199 males
first letter males dictionary:
a  :: 0.11955451170543223
m  :: 0.0847033866201985
s  :: 0.06811122054701113
c  :: 0.0577316463368437
j  :: 0.053640427305098874
e  :: 0.049776498219562086
l  :: 0.048943101750132584
d  :: 0.04788241533449504
b  :: 0.04757936207288431
r  :: 0.04538222592620653
g  :: 0.042806273202515344
h  :: 0.0375028411243276
k  :: 0.037199787862716875
n  :: 0.03553299492385787
t  :: 0.031744829153723765
i  :: 0.029017349799227213
f  :: 0.02810819001439503
y  :: 0.025683763921509204
p  :: 0.02325933782862338
v  :: 0.018940828850670506
o  :: 0.0172740359118115
z  :: 0.01606182286536859
w  :: 0.01424350329570422
x  :: 0.01007652094855671
u  :: 0.005682248655201152
q  :: 0.003485112508523373
ñ  :: 0.0
---------------------------------------------------------------
Females with first letter consonant: 0.7968786216487677
Males with first letter consonant: 0.7786195923933631
---------------------------------------------------------------
Females with first letter vocal: 0.2030441165108553
Males with first letter vocal: 0.2213046442912342

Se descarta por baja diferencia entre hombres y mujeres
+ [ ] el estudio de la primera letra (ver infofeatures.py)
+ [ ] last_letter_o (otras last_letter daban resultados más bajos, excepto last_letter_a)

Las features que se consideran a escoger son:
+ [ ] vocals
+ [ ] consonants
+ [ ] last_letter_a
+ [ ] last_letter_consonant
+ [ ] last_letter_vocal
+ [ ] last_letter

* DONE Escribir un pca
  - State "DONE"       from "GOING"      [2019-12-03 mar 18:17]
** DONE Pensar el dataset (puntos a tener en cuenta)
   - State "DONE"       from "TODO"       [2019-12-03 mar 18:17]
*** DONE Retirar undefined??
	- State "DONE"       from "TODO"       [2019-04-26 vie 22:49]
Nuestro objetivo es predecir los undefined. Por lo que solo tomamos en cuenta los géneros definidos.
*** Variables no continuas
Si son categórisscas de blanco/negro se codifican de manera 0 o 1.
Si son categóricas del estilo mueble (silla, mesa, nevera, sillón, etc.) se retiran.
** DONE Escribir un fichero para sacar el gráfico que nos muestre el número de componentes principales
   SCHEDULED: <2019-02-21 jue>
   - State "DONE"       from "TODO"       [2019-02-21 jue 12:34]
** DONE Escribir un fichero que nos de el dataframe con los compoentes principales
   SCHEDULED: <2019-02-21 jue>
   - State "DONE"       from "TODO"       [2019-02-21 jue 12:35]
** DONE Visualizar el dataset para entender qué features correlacionan según los componentes principales
   SCHEDULED: <2019-02-21 jue>
   - State "DONE"       from "TODO"       [2019-08-03 sáb 15:48]
* DONE En dame_sexmachine.py  es necesario reescribir guess para aplicar Machine Learning
  SCHEDULED: <2019-01-25 vie>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:44]
* DONE En este momento features_list.csv está fallando reescribir desde los tests
  SCHEDULED: <2019-01-25 vie>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:44]
* DONE Escribir probabilidad de cada api/método
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:43]
** namsor
{"scale":-0.9926328311688487,"gender":"male","firstName":"John","lastName":"Smith","id":"1424023766605"}
* DONE Lectura papers
  SCHEDULED: <2019-02-18 lun 9:00>
  - State "DONE"       from "TODO"       [2019-03-22 vie 22:52]
Laboratorios III
Segunda Planta
* DONE En api2gender
  SCHEDULED: <2019-01-28 lun>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:42]
    elif (args.api == "average"):
        dgg = DameGenderGuesser()
        guess1 = dgg.guess(args.name)
        dga = DameGenderApi()
        guess2 = dga.guess(args.name)
        dg = DameGenderize()
        guess3 = dg.guess(args.name)
        dn = DameNamsor()
        guess4 = dn.guess(args.name, args.surname)
        average = guess1 + guess2 + guess3 + guess4 / 4
        print(average)
*
* CANCELED Escribir dame_flask.py
  - State "CANCELED"   from "POSIBLE"    [2021-12-28 mar 17:48]
Now the website is implemented with static pages, in the future with
will need the task to choose the framework, but first we must
implement more with nodejs.
* DONE Escribir un mensaje con el tema de las api key, url de compra
  SCHEDULED: <2019-02-17 dom>
  - State "DONE"       from "TODO"       [2019-03-22 vie 22:53]
* DONE A comentar
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:41]
+ [X] Estadísitica
* DONE Crear bibtex
  SCHEDULED: <2019-01-30 mié>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:41]
* DONE Meter en artículo el manejo de surnames
  SCHEDULED: <2019-01-30 mié>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:41]
* DONE Errors
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:45]
** Sexmachine
$ python3 errors.py --csv="files/all.csv" --api="sexmachine"
Sexmachine with files/all.csv has:
+ The error code: 0.18238449558747188
+ The error code without na: 0.18238449558747188
+ The na coded: 0.0
+ The error gender bias: 0.0868662398338813
** Genderize
$ python3 errors.py --api="genderize" --csv="files/all.csv"
Genderize with files/all.csv has:
+ The error code: 0.15227548018688356
+ The error code without na: 0.060774539877300617
+ The na coded: 0.09742169925592663
+ The error gender bias: 0.032016871165644174
** Genderguesser
$ python3 errors.py --csv="files/all.csv" --api="genderguesser"
Gender Guesser with files/all.csv has:
+ The error code: 0.22564457518601835
+ The error code without na: 0.026539047204698716
+ The na coded: 0.20453365634192766
+ The error gender bias: 0.0026103980857080703

* DONE Crear paquete https://the-hitchhikers-guide-to-packaging.readthedocs.io/en/latest/quickstart.html
  SCHEDULED: <2019-02-01 vie>
  - State "DONE"       from "TODO"       [2019-03-13 mié 17:56]
* DONE Escribir apikey.py para introducir claves de apis en files y dejar configurado el fichero de configuración
  SCHEDULED: <2019-02-04 lun>
  - State "DONE"       from "TODO"       [2019-03-13 mié 17:56]
* DONE Para publicar paquete en pip
  - State "DONE"       from "TODO"       [2019-03-13 mié 17:56]
$ python3 setup.py register sdist bdist upload
$ twine upload --skip-existing dist/*
* DONE guess_list
  SCHEDULED: <2019-02-02 sáb>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:47]
    def guess_list(self, path="files/partial.csv", binary=False):
        fichero = open("files/genderapipass.txt", "r+")
        contenido = fichero.readline()
        string = ""
        names = self.csv2names(path)
#        print(names)
        count = 1
        u = DameUtils()
        names = u.split(names, 99)
        res = []
        for listnames in names:
            for n in listnames:
                if (len(listnames) > count):
                    string = string + n + ";"
                else:
                    string = string + n
                count = count + 1
            string = 'https://gender-api.com/get?name='+string+'&multi=true&key='+contenido
            r = requests.get(string)
            string = ''
            d = json.loads(r.text)
            slist = []
            for item in d['result']:
                if ((item['gender'] == None) & binary):
                    slist.append(2)
                elif ((item['gender'] == None) & (not binary)):
                    slist.append("unknown")
                elif ((item['gender'] == "male") & binary):
                    slist.append(1)
                elif ((item['gender'] == "male") & (not binary)):
                    slist.append("male")
                elif ((item['gender'] == "female") & binary):
                    slist.append(0)
                elif ((item['gender'] == "female") & (not binary)):
                    slist.append("female")
            res.extend(slist)
        return res
* DONE en guess nameapi y fichero de configuración
  - State "DONE"       from "TODO"       [2019-03-13 mié 17:58]
    def guess(self, name, binary=False):
        config = configparser.RawConfigParser()
        config.read('config.cfg')
        if (config['DEFAULT']['genderapi'] == 'yes'):
            fichero = open("files/genderapipass.txt", "r+")
            contenido = fichero.readline()
            r = requests.get('https://gender-api.com/get?name='+name+'&key='+contenido)
            j = json.loads(r.text)
            guess = j['gender']
            if (guess == 'male'):
                if binary:
                    guess = 1
            elif (guess == 'female'):
                if binary:
                    guess = 0
            else:
                if binary:
                    guess = 2
                else:
                    guess = 'unknown'
        else:
            guess = 'unknown'
        return guess
* TODO Comprar libro 100 Problemas resueltos de Estadística Multivariante
  SCHEDULED: <2019-02-17 dom>
Autoras: Amparo Baíllo          Aurea Grané
Editorial: Delta Publicaciones
* DONE En errors.py tener en cuenta el fichero de configuración de apis
  SCHEDULED: <2019-02-17 dom>
  - State "DONE"       from "TODO"       [2019-02-21 jue 12:34]
* DONE Funcionalidad probabilidad. El comando para ejecutar es api2gender.py
  SCHEDULED: <2019-02-11 lun>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:50]
+ [X] genderapi, accuracy
+ [X] genderize, prob
+ [X] nameapi, confidence
+ [X] namsor, scale
* DONE pickle dump nltk
  - State "DONE"       from "POSIBLE"    [2020-03-21 sáb 17:42]
https://pythonprogramming.net/pickle-classifier-save-nltk-tutorial/
save_classifier = open("naivebayes.pickle","wb")
pickle.dump(classifier, save_classifier)
save_classifier.close()
* DONE Leer https://plot.ly/ipython-notebooks/principal-component-analysis/
  SCHEDULED: <2019-02-13 mié>
  - State "DONE"       from "TODO"       [2019-04-26 vie 22:47]
* DONE Hacer el trabajo de scale, probability, average, etc. para el artículo
  SCHEDULED: <2019-02-12 mar>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:47]
* DONE Y Combinator
  SCHEDULED: <2019-03-24 dom>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:52]
* DONE F1 and precision
  - State "DONE"       from "TODO"       [2019-02-18 lun 09:17]
F1 = 2 * (precision * recall) / (precision + recall)
* DONE En features_list añadir argumento dataset como opcional y añadir una columna gender
  SCHEDULED: <2019-02-18 lun>
  - State "DONE"       from "TODO"       [2019-02-17 dom 16:55]
* DONE Revisar que están todas las apis bien hechos los experimentos
  SCHEDULED: <2019-02-18 lun>
  - State "DONE"       from "TODO"       [2019-08-03 sáb 15:56]
Se ha realizado testscommandsextra.sh para garantizar la calidad del software con las apis
* DONE Probar lo de pillar una api key de google
  SCHEDULED: <2019-02-18 lun>
  - State "DONE"       from "TODO"       [2019-03-13 mié 17:59]
* CANCELED Flask
  SCHEDULED: <2019-02-18 lun>
  - State "CANCELED"   from "TODO"       [2021-12-28 mar 17:50]
https://medium.com/ymedialabs-innovation/deploy-flask-app-with-nginx-using-gunicorn-and-supervisor-d7a93aa07c18
Now the website is implemented with static pages, in the future with
will need the task to choose the framework, but first we must
implement more with nodejs.
* DONE Ejecutar script accuracy para nameapi
  - State "DONE"       from "TODO"       [2019-03-13 mié 18:01]
Nameapi accuracy: 0.18329564725833805
* DONE Organizar en carpetas (census, images, sav, apikeys) la carpeta files
  SCHEDULED: <2019-02-23 sáb>
  - State "DONE"       from "TODO"       [2019-03-13 mié 18:00]
+ [X] dame_customsearch.py
+ [X] dame_genderapi.py
+ [X] dame_genderize.py
+ [X] dame_gender.py
+ [X] dame_genderguesser.py
+ [X] dame_nameapi.py
+ [X] dame_namsor.py
+ [X] dame_perceval.py
+ [X] dame_sexmachine.py
+ [X] test_dame_genderapi.py
+ [X] test_dame_genderguesser.py
+ [X] test_dame_genderize.py
+ [X] test_dame_gender.py
+ [X] test_dame_nameapi.py
+ [X] test_dame_namsor.py
+ [X] test_dame_sexmachine.py
+ [X] accuracy.py
+ [X] apikeyadd.py
+ [X] confusion2.py
+ [X] confusion.py
+ [X] corr.py
+ [ ] csv2gender.py
+ [X] damemodels.py
+ [X] errors.py
+ [ ] pca-features2.py
+ [X] pca-features.py

* POSIBLE Escribir dame_photo
** DONE He creado un script damefaces.py
   - State "DONE"       from "TODO"       [2020-04-25 sáb 00:15]
** DONE He comenzado el desarrollo relativo a repositorios en dame_perceval.py
   - State "DONE"       from "TODO"       [2020-04-25 sáb 00:15]
** DONE Sacar el script damephoto a un paquete pip
   - State "DONE"       from "TODO"       [2020-07-06 lun 23:04]
Se hizo un setup.py que funciona, pero he pensado en respetar un poco
más el software original, aunque ya ha diferencias notables, si no
desarrollo mucho más prefiero no empaquetar.
** POSIBLE Plantear la integración con git2gender esta pequeña cuestión
En https://api.github.com/users/davidam aparece el campo avatar_url y ahí:
wget -c https://avatars2.githubusercontent.com/u/1023217

Podría ser un parámetro de git2gender que llamara al reconocimiento de
imágenes.

* DONE dataset2genderlist
  SCHEDULED: <2019-02-23 sáb>
  - State "DONE"       from "TODO"       [2019-03-22 vie 22:53]
1. Dar 2 argumentos datasetfile y census (es, uk, usa, ...)
2. Si existe datasetfile aplica datasetfile, sino aplica census
* DONE En pca-features tener en consideración nombres 0 o 1
  SCHEDULED: <2019-02-24 dom>
  - State "DONE"       from "TODO"       [2019-06-07 vie 15:57]
* DONE Urls dando problemas en lo del kernel
  SCHEDULED: <2019-02-26 mar>
  - State "DONE"       from "TODO"       [2019-03-22 vie 22:54]
+ [ ] https://git.kernel.org/pub/scm/boot/syslinux/syslinux.git/
+ [ ] https://git.kernel.org/pub/scm/devel/pahole/pahole.git/
+ [ ] https://git.kernel.org/pub/scm/docs/man-pages/man-pages.git/

['', 'H. Peter Anvin', 'Murali Krishnan Ganapathy', 'Kenneth Fyfe', 'Tim Deegan', 'Curtis Doty', 'Erwan Velu', 'Arne Georg Gleditsch', 'erwan', 'hiranotaka@zng.info', 'Ram Yalamanchili', 'Ferenc Wagner', 'Luciano Rocha', 'Otavio Salvador', 'Duane Voth', 'Gerald Britton', 'Bernard Li', 'Geert Stappers', 'Jeffrey Hutzelman', 'Bruce Robson', 'Erwan', 'Sebastian Herbszt', 'Maciej W. Rozycki', 'Sergey Vlasov', 'Stefan Bucur', 'Murali Ganapathy', 'Stefan Hajnoczi', 'Remi Lefevre', 'Dag Wieers', 'Ralf Ertzinger', 'Olivier Korn', 'Gene Cumm', 'Vicente Jimenez Aguilar', 'Michael Brown', 'Pierre-Alexandre Meyer', 'Shao Miller', 'Omair Eschkenazi', 'Christophe Fergeau', 'Daniel Baumann', 'Steffen Winterfeldt', 'Pascal Terjan', 'Liu Aleaxander', 'Gilles Espinasse', 'Miller, Shao', 'profkhaos', 'Aleaxander', 'Gert Hulselmans', 'root', 'Kim Mik', 'Alek Du', 'Yuanhan Liu', 'Du, Alek', 'Michal Soltys', 'P. J. Pandit', 'Paul Bolle', 'Thomas Bächler', 'George David', 'Alexey Zaytsev', 'Marcel Ritter', 'Laurent Licour', 'Feng Tang', 'feng.tang@intel.com', 'Matt Fleming', 'Don Hiatt', 'Arwin Vosselman', 'P J P', 'Colin Watson', 'Ahmed S. Darwish', 'Rich Mahn', 'Paulo Alcantara', 'Jim Cromie', 'Yi Yang', 'Matthew Garrett', 'Henri Roosen', 'Jean-Christian de Rivaz', 'Timm Gleason', 'Alexander E. Patrakov', 'Micah Gersten', 'Andre Ericson', 'Thierry Reding', 'Chandramouli Narayanan', 'Hung-chi Lihn', 'Frediano Ziglio', 'Vanush "Misha" Paturyan', 'Kenneth J. Davis', 'Chen Baozi', 'Ruben Kerkhof', 'Peter Jones', 'Felipe Pena', 'chandramouli narayanan', 'Eric W. Biederman', 'Josh Triplett', 'Raphael S.Carvalho', 'Raphael S. Carvalho', 'Russel Santillanes', 'James Buren', 'Celelibi', 'Thomas Schmitt', 'Sylvain Gault', 'Magnus Granberg', 'Andy Alex', 'Ferenc Wágner', 'Serj Kalichev', 'Kai Kang', 'Lubomir Rintel', 'Chanho Park', 'MartinS', 'Martin Str|mberg', 'Philippe Coval', 'Dany St-Amant', 'Robert Yang', 'Ady', 'Scot Doyle', 'Jonathan Boeing', 'Andrew J. Schorr', 'Patrick Masotta', 'Robert', 'Oliver Wagner', 'Thomas Letan', 'Imran Zaman', 'Alex', 'Nicolas Cornu', 'Nicolas Cornu via Syslinux', 'Khem Raj', 'Olivier Brunel', 'Pete Batard', 'Mike Frysinger', 'Bruno Levert']
* DONE setup.py
  SCHEDULED: <2019-02-28 jue>
  - State "DONE"       from "TODO"       [2019-03-22 vie 22:53]
https://docs.python.org/2/distutils/setupscript.html
* DONE Plantearse separar dame_gender.py a dame_statistics.py
  SCHEDULED: <2019-08-03 sáb>
  - State "DONE"       from "TODO"       [2020-12-06 dom 23:07]
Lo separé sí.
* CANCELED remove_if_contains_init
  SCHEDULED: <2019-03-09 sáb>
  - State "CANCELED"   from "TODO"       [2020-07-06 lun 23:15]
* DONE Aprender a hacer comandos
  SCHEDULED: <2019-03-09 sáb>
  - State "DONE"       from "TODO"       [2019-03-22 vie 22:54]
pip3 install dametowel
* DONE Comenzar a medir eficiencia
  SCHEDULED: <2019-05-16 jue>
  - State "DONE"       from "TODO"       [2020-03-21 sáb 16:46]
Creado script performance.sh
* TODO Revisar dataset2genderlist con todos los datasets
  SCHEDULED: <2019-05-30 jue>
Es un método de app/dame_gender.py
* DONE Revisar los métodos males y females para todos los datasets
  SCHEDULED: <2019-05-31 vie>
  - State "DONE"       from "TODO"       [2019-08-03 sáb 16:01]
* DONE Introducir gender guesser en main.py
  SCHEDULED: <2019-05-30 jue>
  - State "DONE"       from "TODO"       [2019-05-30 jue 16:50]
* POSIBLE Métodos hacia dame_dataset
+ [ ]    def males_list(self):
+ [ ]    def females_list(self):
+ [ ]    def name2gender_in_dataset(self, name, dataset=''):
+ [ ]    def dataset2genderlist(self, dataset=''):
+ [ ]    def csv2names(self, path='files/names/partial.csv'):
+ [ ]    def gender_list(self, path='files/names/partial.csv'):
+ [ ]    def name_frec(self, name, dataset='ine'):
+ [ ]    def namdict2file():
+ [ ]    def filenamdict2list():
* DONE Mejorar postinstall
  SCHEDULED: <2019-05-31 vie>
  - State "DONE"       from "TODO"       [2019-06-01 sáb 17:01]
Crear un solo fichero desde:
+ damemodels.py
+ namdictlist2file.py
https://stackoverflow.com/questions/20288711/post-install-script-with-python-setuptools
* DONE Echar un vistazo a:
  SCHEDULED: <2019-05-31 vie>
  - State "DONE"       from "TODO"       [2019-06-07 vie 15:56]
+ https://github.com/chaoss/grimoirelab-sortinghat/blob/master/setup.py
     package_data={'sortinghat.templates': ['*.tmpl'],
                    'sortinghat.data': ['*'],
                    },
* DONE Hay problemas con Alex
  SCHEDULED: <2019-05-31 vie>
  - State "DONE"       from "TODO"       [2019-06-01 sáb 09:50]
$ python3 main.py Alex
Alex gender is female
41351  males for Alex from INE.es
140  females for Alex from INE.es
* DONE Empezar fichero performance.sh para ver la velocidad de respuesta de las diferentes APIs
  SCHEDULED: <2019-06-01 sáb>
  - State "DONE"       from "TODO"       [2019-06-09 dom 17:58]
* DONE Escribir nameincountries.py
  SCHEDULED: <2019-06-07 vie>
  - State "DONE"       from "TODO"       [2019-06-07 vie 15:59]
* DONE En confusion.py hay un lío con nameapi
  SCHEDULED: <2019-08-03 sáb>
  - State "DONE"       from "TODO"       [2019-12-03 mar 18:16]
* DONE Puesto que uno de los componentes de PCA nos ha dado que la primera letra podría indicar género estaría bien hacer un infofeatures por vocal o consonante
  - State "DONE"       from "TODO"       [2019-06-10 lun 11:09]
Parece que esa no sería la pista:
---------------------------------------------------------------
Females with first letter consonant: 0.7968786216487677
Males with first letter consonant: 0.7735667564447865
---------------------------------------------------------------
Females with first letter vocal: 0.2030441165108553
Males with first letter vocal: 0.22633705271258175
* DONE Probando min.csv generar un fichero que devuelva género y probabilidad con genderapi en json
  SCHEDULED: <2019-07-01 lun>
  - State "DONE"       from "TODO"       [2019-08-03 sáb 16:12]
* DONE Revisar features_list.csv
  SCHEDULED: <2019-08-03 sáb>
  - State "DONE"       from "TODO"       [2022-03-07 lun 10:42]
* DONE pca-features in bash test
  SCHEDULED: <2019-07-02 mar>
  - State "DONE"       from "TODO"       [2019-07-02 mar 13:57]
* DONE Sacar el accuracy desde el json de genderapi
  SCHEDULED: <2019-08-04 dom>
  - State "DONE"       from "TODO"       [2019-08-06 mar 19:23]
* DONE Sacar el confusion desde el json de genderapi
  - State "DONE"       from "TODO"       [2019-12-03 mar 18:16]
* TODO Arreglar el tema de los binarios en la paquetería
** TODO Montar namespaces
* TODO Buscar la validez de la muestra para saber si los nacimientos en uk y usa nos valdrían para sacar probabilidades
* DONE Revisar cumplimiento de PEP8 en el software
  - State "DONE"       from "GOING"      [2022-03-07 lun 10:43]
** A Foolish Consistency is the Hobgoblin of Little Minds
** Code Lay-out
*** Indentation
*** Tabs or Spaces?
*** Maximum Line Length
*** Should a Line Break Before or After a Binary Operator?
*** Blank Lines
*** Source File Encoding
*** Imports
*** Module Level Dunder Names
** String Quotes
** Whitespace in Expressions and Statements
*** Pet Peeves
*** Other Recommendations
** When to Use Trailing Commas
** Comments
*** Block Comments
*** Inline Comments
*** Documentation Strings
** Naming Conventions
*** Overriding Principle
*** Descriptive: Naming Styles
*** Prescriptive: Naming Conventions
**** Names to Avoid
**** ASCII Compatibility
**** Package and Module Names
**** Class Names
**** Type Variable Names
**** Exception Names
**** Global Variable Names
**** Function and Variable Names
**** Function and Method Arguments
**** Method Names and Instance Variables
**** Constants
**** Designing for Inheritance
*** Public and Internal Interfaces
** Programming Recommendations
*** Function Annotations
*** Variable Annotations
* DONE Revisar que los métodos de confusion matrix estén bien refactorizados
  SCHEDULED: <2019-12-03 mar>
  - State "DONE"       from "TODO"       [2019-12-17 mar 11:40]
* DONE confusion_matrix_gender
  SCHEDULED: <2019-12-10 mar>
  - State "DONE"       from "TODO"       [2019-12-17 mar 11:40]
Reescribir el método en dame_gender.py dando solo como argumentos guess_vector true_vector
* DONE Crear un método para cada api que revise si hay dinero en la api key en Genderapi
GET https://gender-api.com/get-stats?&key=<your private server key>

* DONE Crear el script downloadjson.py
  - State "DONE"       from "TODO"       [2020-02-05 mié 17:20]
* DONE Crear el script damegender2json.py
  SCHEDULED: <2020-02-05 mié>
  - State "DONE"       from "TODO"       [2020-02-05 mié 17:16]
* DONE Añadir algoritmo de ML tree
  - State "DONE"       from "TODO"       [2020-02-05 mié 17:17]
* DONE Añadir algortimo de ML red neuronal (mlp)
  - State "DONE"       from "TODO"       [2020-02-05 mié 17:17]
* DONE Revisar los undefined en accuracy
  SCHEDULED: <2020-02-05 mié>
  - State "DONE"       from "TODO"       [2022-01-01 sáb 22:08]
Parece que puede haber bugs si hay en el guess list undefined
Puedes hacer pruebas con partial.csv
* DONE Generar los json para damegender
  - State "DONE"       from "TODO"       [2020-03-21 sáb 00:12]
** DONE Para cada algoritmo de ml generar json para
   - State "DONE"       from "TODO"       [2020-03-21 sáb 00:12]
*** DONE min.csv
	- State "DONE"       from "TODO"       [2020-02-05 mié 17:38]
*** DONE partial.csv
	- State "DONE"       from "TODO"       [2020-02-05 mié 17:38]
*** DONE allnoundefined.csv
    - State "DONE"       from "TODO"       [2020-02-07 vie 22:22]
*** DONE all.csv
    - State "DONE"       from "TODO"       [2020-03-21 sáb 00:12]
** DONE json2guesslist eliminar el parámetro ml
   - State "DONE"       from "TODO"       [2020-02-07 vie 15:20]
* DONE Generar logs de accuracies de los diferentes algoritmos de ML
  - State "DONE"       from "TODO"       [2020-03-21 sáb 00:13]
* DONE Generar logs de confusion de los diferentes algoritmos de ML
  - State "DONE"       from "TODO"       [2020-03-21 sáb 00:13]
* DONE En accuracy.py terminar la transición a jsondownloaded required=True
  SCHEDULED: <2020-02-08 sáb>
  - State "DONE"       from "TODO"       [2020-03-21 sáb 00:13]
* DONE Escribir damegender.net
  SCHEDULED: <2020-02-06 jue>
  - State "DONE"       from "TODO"       [2020-02-06 jue 16:36]
Github en https://github.com/davidam/damegender-web
* DONE Hacer un vídeo
  SCHEDULED: <2020-02-06 jue>
  - State "DONE"       from "TODO"       [2020-02-06 jue 16:38]
Publicado en https://tv.urjc.es/video/5d895319d68b148f7a8c0da6
* TODO Hacer un pequeño sistema basado en reglas
+ [ ] finaliza en consonante
+ [ ] finaliza en a
+ [ ] tiene 4 letras o menos (puede ser diminutivo)

Esto es bastante interesante ahora que con wikidata tenemos datasets
de todos los países del mundo, habría que hacer ngramas con diferentes
tamaños e identificar los ngramas más utilizados en los diferentes
países, sería bonito hacer una especial atención a la diversidad
lingüística dentro de España, como ejemplo de un país donde el INE.es
nos permite determinar los diferentes nombres y apellidos por regiones
y poder determinar los ngramas por regiones, por ejemplo, los nombres y
apellidos con k aparezcan más en las regiones vascuences.

* DONE Mejorar la base de verdad (ej: INE) relativo a posibles no nombres por baja frecuencia
  - State "DONE"       from "TODO"       [2022-01-07 vie 18:10]
commit 636f6c38b349ec7d4e8d17c57c0f78100085aba4 (HEAD -> master, origin/master, origin/HEAD)
Author: David Arroyo Menéndez <davidam@gmail.com>
Date:   Fri Jan 7 18:06:01 2022 +0100

    app/dame_gender.py: adding a new argument to guess about a range in the frequency to discard names with a low frequency as not names, perhaps names in another cultures (see: isa or efe in Spain dataset)
* DONE Added new datasets:
  - State "DONE"       from "TODO"       [2020-02-17 lun 00:52]
Now the next datasets available from main.py in damegender
+ [X] United Kingdom
+ [X] United States of America
+ [X] Uruguay
+ [X] Lucía Santamaría and Helena
* DONE Crea un dataset al estilo del de Lucía y Helena, construido a partir de nombres y apellidos
  - State "DONE"       from "TODO"       [2021-12-21 mar 18:07]
Lo dejo en el repositorio de python-examples en la carpeta sparql los siguientes scripts:
+ [X] wikidata-female-scientists.py
+ [X] wikidata-male-scientists.py
+ [X] wikidata-male-artists.py
+ [X] wikidata-female-artists.py
* DONE Crear un dataset de base de verdad desde los censos
  - State "DONE"       from "TODO"       [2022-03-07 lun 10:35]
Esta tarea es el inter dataset, hemos hecho hasta un paper, se puede dar por finalizada, aunque se sigan haciendo mejoras,
como corresponde a la normalidad de la culturas free software o open source.
** DONE con csv2names creamos una lista con todos los nombres donde cada nombre es único
   - State "DONE"       from "TODO"       [2021-05-10 lun 08:51]
** DONE para cada nombre sumamos todos los males de los diferentes datasets y todos los females y escribimos en fichero
   - State "DONE"       from "TODO"       [2021-05-10 lun 08:51]
** CANCELED escribir un segundo fichero donde se descartan nombres donde la suma de hombres y mujeres sea menor de 1000
   - State "CANCELED"   from "TODO"       [2022-03-07 lun 10:33]
Es para evitar el problema de apodos en censos. Lo dejamos a criterio del programador
** CANCELED comprobamos el accuracy y el confusion tomando como base a lucía y helena
   - State "CANCELED"   from "TODO"       [2021-05-10 lun 08:52]
* DONE Reescribir males_list atendiendo a corpus
  - State "DONE"       from "TODO"       [2020-07-06 lun 22:52]
Debes escribir primero los ficheros males.txt y females.txt de cada dataset
    def males_list(self, corpus='es'):
        ine_path = 'files/names/names_es'
        ine_corpus = nltk.corpus.PlaintextCorpusReader(ine_path, '.*\.txt')
        uk_path = 'files/names/names_uk'
        uk_corpus = nltk.corpus.PlaintextCorpusReader(uk_path, '.*\.txt')
        us_path = 'files/names/names_us'
        us_corpus = nltk.corpus.PlaintextCorpusReader(us_path, '.*\.txt')

        # if (corpus == 'uk'):
        #     m = uk_corpus.sents('ukmales.txt')[1]
        # elif (corpus == 'us'):
        #     m = us_corpus.sents('usmales.txt')[1]

        m = 0
        if ((corpus == 'es') or (corpus == 'ine')):
            m = ine_corpus.sents('masculinos.txt')[1]
        # elif (corpus == 'all'):
        #     m = uk_corpus.sents('ukmales.txt')[1] + us_corpus.sents('usmales.txt')[1] + ine_corpus.sents('masculinos.txt')[1]
        #m = list(OrderedDict.fromkeys(m))
        return m
* DONE Crear script bash de logs.sh
  - State "DONE"       from "TODO"       [2020-03-27 vie 05:57]
* DONE Revisar logs de ML tras crear logs.sh
  - State "DONE"       from "TODO"       [2020-03-27 vie 05:57]
* DONE Revisar logs
  - State "DONE"       from "TODO"       [2020-04-25 sáb 00:12]
+ [X] bernoulli
+ [X] forest
+ [X] gaussian
+ [X] mlp
+ [X] multinomial
+ [X] nltk
+ [X] sgd
+ [X] svc
+ [X] tree
* DONE vsa
  - State "DONE"       from "TODO"       [2020-07-06 lun 22:53]
** DONE VSA10 (males names)
   - State "DONE"       from "TODO"       [2020-07-06 lun 22:52]
+ https://data.gov.ie/dataset/boys-names-registered-in-ireland-by-name-year-and-statistic
+ [ ] vsa10_1~2p.csv (males names and he is male)
+ [ ] vsa10_2~2p.csv (males names, but she is female)
** DONE VSA11 (females names)
   - State "DONE"       from "TODO"       [2020-07-06 lun 22:53]
+ https://data.gov.ie/dataset/girls-names-registered-in-ireland-by-name-year-and-statistic
+ [ ] vsa11_1~2p.csv (females names and she is female)
+ [ ] vsa11_2~2p.csv (females names, but he is male)
** DONE malesbyyears.csv
   - State "DONE"       from "TODO"       [2020-07-06 lun 22:52]
+ [ ] drop NA fields with """.."""
+ [ ] vsa10_1~2p.csv (males names and he is male)
+ [ ] vsa11_2~2p.csv (females names, but he is male)
** DONE femalesbyyears.csv
   - State "DONE"       from "TODO"       [2020-07-06 lun 22:52]
+ [ ] drop NA fields with """.."""
+ [ ] vsa10_2~2p.csv (males names, but she is female)
+ [ ] vsa11_1~2p.csv (females names and she is female)

* DONE Crear un script readme2md.sh
  SCHEDULED: <2020-04-03 vie>
  - State "DONE"       from "TODO"       [2020-04-25 sáb 00:12]
* FUTURE Morfología de idiomas
Hay idiomas que los nouns tienen género para llegar a esto es posible revisar la morfología de un idioma:
+ https://en.wikipedia.org/wiki/Polish_morphology#Nouns

* TODO Tener en cuenta que hay más clasificadores
** TODO https://scikit-learn.org/stable/modules/ensemble.html#gradient-tree-boosting
+ [ ] DecisionTree
+ [ ] RandomForest
+ [ ] ExtraTrees
+ [X] AdaBoost
+ [ ] GradientBoostingClassifier
+ [ ] GradientBoostingRegressor
+ [ ] KNeighborsClassifier
* TODO Escribir delete_similar_in_list
    # def delete_similar_in_list(self, l, degree):
    #     if (len(l) == 0):
    #         return l
    #     else:
    #         rest = []
    #         for i in l:
    #             if (self.sentence_similarity(i, l[0]) > degree):
    #                 rest = rest + [i]
    #     return [l[0]] + self.delete_similar_in_list(rest, degree)

  # def test_delete_similar_in_list(self):
  #     dn = DameNLTK()
  #     degree = 0.7
  #     self.assertTrue(dn.delete_similar_in_list(["This is a good sentence".split(), "This is a bad sentence".split()], degree))
* DONE Escribir un método download_free_names
  SCHEDULED: <2020-05-14 jue>
  - State "DONE"       from "TODO"       [2021-12-21 mar 18:14]
Hay que aprender a descargar y limpiar todas las posibles profesiones de wikidata con sparql.
Recuerda el repositorio de python-examples en la carpeta sparql los siguientes scripts:
+ [X] wikidata-female-scientists.py
+ [X] wikidata-male-scientists.py
+ [X] wikidata-male-artists.py
+ [X] wikidata-female-artists.py 
* DONE Escribir el comando top para mostrar, por ejemplo, los 10 nombres más utilizados en USA
  - State "DONE"       from "TODO"       [2020-07-06 lun 16:57]
** Parámetros
*** country (US por defecto)
*** sex (male, female or all)
*** n (number of names)
*** less (to show paginate)
    def less(data):
        process = Popen(["less"], stdin=PIPE)
        try:
            process.stdin.write(data)
            process.communicate()
        except IOError as e:
            pass

* POSIBLE Plantearse descargar los nombres italianos con web scraping
+ [ ] https://www.istat.it/en/analysis-and-products/interactive-contents/baby-names


* DONE Escribir count-scientifics.py
  - State "DONE"       from "TODO"       [2020-06-08 lun 12:31]
* DONE Escribir una carpeta names_inter con un csv un fichero males y females que tenga sumados todos los datasets
  SCHEDULED: <2020-06-26 vie>
  - State "DONE"       from "TODO"       [2021-05-03 lun 11:23]
* DONE Escribir el método surname_starts_by y name_starts_by para que dado un nombre o un apellido liste todo los nombres con los que hace match
  - State "DONE"       from "TODO"       [2021-01-25 lun 05:58]
Se puede hacer también al revés con lo que acaba (ej: name_ends_by y surname_ends_by)
O se puede hacer directamente con expresión regular (ej: name_regex y surname_regex)

Queda finalmente implementado en el comando startwith.py
* DONE Hacer un screencast usando los principales comandos
  SCHEDULED: <2020-07-06 lun>
  - State "DONE"       from "TODO"       [2020-09-02 mié 05:55]
* DONE Añadir Bélgica
* CANCELED En top.py estaría bien una opción --all-countries que despliegue en formato tabla los top de diferentes países
  - State "CANCELED"   from "TODO"       [2021-05-03 lun 18:38]
Aumenta en exceso la complejidad de sw y de manera algo incómoda de mantener
* CANCELED percentage2names.py
  SCHEDULED: <2021-12-21 mar>
  - State "CANCELED"   from "TODO"       [2021-12-28 mar 17:51]
Dado un porcentaje de género dame los nombres
* DONE Hacer trabajos técnicos a favor de la incorporación de Turquía en DameGender
  - State "DONE"       from "TODO"       [2021-05-10 lun 08:54]
+ [ ] Hablar con el gobierno Turco acerca de la libertad de los nombres
+ [ ] Estudiar trabajos de otros hackers en este sentido
https://github.com/mkozturk/turkishnames/
* DONE Hacer trabajos técnicos a favor de la incorporación de China en DameGender
  - State "DONE"       from "TODO"       [2021-05-10 lun 08:54]
Mirar el paquete de R ChineseNames
* DONE Unifying criteria counting males and females
  SCHEDULED: <2021-10-09 sáb>
  - State "DONE"       from "FUTURE"     [2023-01-06 vie 12:47]
The criteria was unified: one person, one vote. So, we can choose borns or total, but not both.

** Old description
We have found 2 main criteria counting males and females: number of
borns in a year and people using the name in a year. Both criteria are
good indicators to understand how many people is using a name as male
or as female. But we have divided the files being to able of make
merging. The criteria making the count in baby name is the sum of the
last fifty years where the data has been provided.

This task is with FUTURE tag because has low priority. The gender has
not changed too much changing the method to count, the accuracy will be
improved a little bit in some names, but the biases in the current
state is happening due to lack of countries and alphabets.

* DONE [#A] Usar csv o json debe ser una opción en base de verdad y comparación con respecto confusion y accuracy
  - State "DONE"       from "TODO"       [2023-01-06 vie 12:48]
** DONE 1. Debemos unificar nombres de métodos
   - State "DONE"       from "TODO"       [2023-01-06 vie 12:47]
+ [ ] gender_list by csv2gender_list
+ [ ] json2guess_list by json2gender_list

** DONE 2. En confusion y accuracy deben reescribirse los argumentos --csv y --jsondownloaded a --csv-base-of-truth, --json-base-of-truth, --json-to-compare y --csv-to-compare
  SCHEDULED: <2021-05-08 sáb>
  - State "DONE"       from "TODO"       [2023-01-06 vie 12:47]
** DONE 3. Escribir csv2json.py
   - State "DONE"       from "TODO"       [2023-01-06 vie 12:48]
Los campos de cada persona
+ name (obligatorio)
+ surname (opcional, por defecto vacío)
+ total_males
+ total_females
+ probability (opcional, por defecto valor 1)
+ gender (obligatorio)
* DONE Rehacer los experimentos de Machine Learning con alguna profesión divertida de wikidata
  - State "DONE"       from "TODO"       [2022-03-07 lun 10:44]
Por ejemplo, con scientists: 
+ [ ] python-examples/sparql/wikidata-male-scientists.py
+ [ ] python-examples/sparql/male-scientists.csv
+ [ ] python-examples/sparql/wikidata-female-scientists.py
+ [ ] python-examples/sparql/female-scientists.csv

* TODO Cuestionarse separar la paquetería damegender en datos y código
Ver: https://stackoverflow.com/questions/779495/access-data-in-package-subdirectory
* TODO La representación de sexo de manera numérica debe ser más fiel a la norma ISO/IEC 5218
+ [ ] 0 <-> not know
+ [ ] 1 <-> male
+ [ ] 2 <-> female
+ [ ] 9 <-> not applicable

Para más información de estandarización acerca del género o sexo:
+ [ ] https://microformats.org/wiki/gender-formats
+ [ ] ISO/IEC 5218 (https://www.iso.org/standard/36266.html

* DONE Resolver los problemas de alfabetos latinos y no latinos
  - State "DONE"       from "TODO"       [2022-03-07 lun 10:31]
Por fin hemos encontrado una herramienta para convertir alfabetos no latinos a latinos:
$ pip3 install transliterate

Parece que transliterate no resuelve algunos juegos de alfabetos como el chino que nos van a hacer falta, pero entre transliterate y wikidata se puede dar por finalizada la tarea

** DONE Revisar dataset ruso
   - State "DONE"       from "TODO"       [2022-03-07 lun 10:30]
Al ser de una fuente estadística oficial y licenciado de manera libre no presenta
muchos problemas incluso la reproducibilidad sale algo fácil

*** DONE Migrados los caracteres cirílicos a latinos

    - State "DONE"       from "TODO"       [2022-03-07 lun 10:30]
** TODO Revisar dataset chino
Para comprobar que un nombre es el mismo apoyarse en wikipedia
suele ser la misma url cambiando locale
*** TODO Se trata de coger un dataset prueba con ALFABETO CHINO
descargar con genderapi o similar
y ver que las desviaciones son razonables

*** TODO Se trata de coger un dataset prueba con ALFABETO LATINO
descargar con genderapi o similar
y ver que las desviaciones son razonables

* DONE Ahora mismo damegender no se instala en macos debido a lxml
  - State "DONE"       from "TODO"       [2022-03-07 lun 10:27]
  Tratar de reemplazar por librería nativa para evitar problemas de dependencias
  https://docs.python.org/3/library/xml.etree.elementtree.html
* CANCELED Crear un método normalize_names_and_white_spaces
  - State "CANCELED"   from "TODO"       [2023-01-06 vie 12:43]
ESTA TAREA HA SIDO REESCRITA COMO "Checklist a cada csv de un país"


La entrada es una cadena y si tiene cadenas de caracteres candidatas a nombres
y espacios en blanco devuelve true

Si las cadenas de caracteres no son candidatas a nombres devuelve false

Los espacios en blanco podrían ser reemplazados por espacios bajos o guiones
en función de la normalización que quiere hacer el programador, al revés
también.

Después del último nombre de un posible nombre compuesto no debería haber
espacios en blanco.

Dar la posibilidad de mantener o reemplazar acentos por otra cosa.

** TODO ¿Es un guión parte de un nombre?
Esto es un poco lo más complicado de la normalización, puede haber personas que
digan mi nombre es con guión y otras personas pueden decir que es opcional escribir
con guión o con espacios en blanco. Me parece difícil tomar una postura y me puedo
meter en líos programando para abordar esta tarea si tomo decisiones de una manera
arbitraria.

Quizás deba cancelar esta tarea y seguir abordándolo todo esto con los métodos que lo
estaba haciendo


* DONE Crear un script para descargar nombres desde wikidata especificando el país y el género
- State "DONE"       from "TODO"       [2022-04-08 vie 23:56]
* DONE Crear un script para desccarga apellidos desde Wikidata especificando el país
- State "DONE"       from "TODO"       [2022-04-08 vie 23:57]
* DONE Descargar los apellidos de todos los países
  - State "DONE"       from "TODO"       [2022-04-08 vie 23:57]
* DONE Crear un script en bash para realizar el empaquetamiento python (ej: packaging.sh)
  - State "DONE"       from "TODO"       [2022-04-08 vie 23:59]
* DONE Crear un script en bash para ejecutar los test python
  - State "DONE"       from "TODO"       [2022-04-09 sáb 00:01]
* DONE Reproducibilidad en Datasets
  - State "DONE"       from "TODO"       [2023-01-06 vie 12:41]
** DONE download.sh en todos los paises con estadísticas oficiales
   - State "DONE"       from "TODO"       [2023-01-06 vie 12:41]
+ [X] "ar"
+ [X] "at"
+ [X] "au"
+ [X] "be"
+ [X] "ca"
+ [X] "ch"
+ [X] "de"
+ [ ] "dk"
+ [X] "es"
+ [X] "fi"
+ [X] "fr"
+ [X] "gb"
+ [X] "ie"
+ [ ] "is"
+ [X] "no"
+ [X] "mx"
+ [X] "pt"
+ [X] "ru"
+ [X] "se"
+ [X] "uy"
+ [X] "us"
** DONE orig2.py en todos los paises con estadísticas oficiales
   - State "DONE"       from "TODO"       [2023-01-06 vie 12:41]
*** DONE "ar"
- State "DONE"       from "TODO"       [2022-07-22 vie 03:46]
*** DONE "at"
- State "DONE"       from "TODO"       [2022-07-14 jue 17:24]
*** DONE "au"
- State "DONE"       from "TODO"       [2022-07-18 lun 20:37]
*** DONE "be"
- State "DONE"       from "TODO"       [2022-07-12 mar 11:49]
*** DONE "ca"
- State "DONE"       from "TODO"       [2022-07-12 mar 11:48]
*** DONE "ch"
- State "DONE"       from "TODO"       [2022-07-14 jue 18:35]
*** DONE "de"
- State "DONE"       from "TODO"       [2022-07-14 jue 18:35]
*** TODO "dk"
*** DONE "es"
- State "DONE"       from "TODO"       [2022-07-12 mar 11:48]
*** DONE "fi"
- State "DONE"       from "TODO"       [2022-07-24 dom 21:50]
*** DONE "fr"
- State "DONE"       from "TODO"       [2022-07-22 vie 03:45]
*** TODO "gb"
*** DONE "ie"
- State "DONE"       from "TODO"       [2022-07-12 mar 11:48]
*** TODO "is"
*** DONE "it"
- State "DONE"       from "TODO"       [2022-07-12 mar 11:50]
*** DONE "no"
SCHEDULED: <2022-07-12 mar>
- State "DONE"       from "TODO"       [2022-07-12 mar 11:48]
*** DONE "mx"
- State "DONE"       from "TODO"       [2022-07-12 mar 16:07]
*** DONE "pt"
- State "DONE"       from "TODO"       [2022-07-12 mar 16:07]
*** DONE "ru"
- State "DONE"       from "TODO"       [2022-08-07 dom 18:34]
*** DONE "se"
- State "DONE"       from "TODO"       [2022-07-12 mar 11:51]
*** DONE "uy"
- State "DONE"       from "TODO"       [2022-07-12 mar 11:49]
*** DONE "us"
- State "DONE"       from "TODO"       [2022-08-15 lun 16:59]
* TODO Los datasets pequeños deben dar respuesta INTER
Cuando tenemos un dataset como el de Italia que aunque recuperado
de manera replicable desde institución estadística oficial da un
número de nombres muy bajo. Sería necesario dar nombres INTER
dando una explicación, por ejemplo, decir que el dataset es menor
de 1000 nombres y, por tanto, estamos asumiendo que el nombre podría
existir en el territorio italiano, pero no podemos dar el género
con el dataset científico y damos la respuesta internacional.
* DONE Reescribir pretty_gg_list para aceptar json y csv
- State "DONE"       from "TODO"       [2022-10-04 mar 21:37]
* DONE Elegir el logo de gender equity como logo oficial de Damegender
SCHEDULED: <2022-08-10 mié>
- State "DONE"       from "TODO"       [2022-08-14 dom 13:56]
En sintonía con el Objetivo de Desarrollo Sostenible 5 de Naciones Unidas
y, anticipándonos a la versión 0.5 de Damegender se ha elegido el logo
de Equidad de Género como logo oficial del proyecto Damegender.
Generando un listado de canciones que se considera en sintonía
con la nueva línea del proyecto. 
* DONE Echar un vistazo a este accuracy mal calculado tras reescribir pretty_gg_list
SCHEDULED: <2022-08-14 dom>
- State "DONE"       from "TODO"       [2022-08-19 vie 19:13]
% python3 accuracy.py --dataset_test=files/names/partial.csv --measure=accuracy --api=damegender --dataset_true=files/names/partial.csv.json 
################### Damegender!!
Guess list:       [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
Gender Test list: [1, 1, 1, 1, 2, 1, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
Damegender accuracy: 1.0

accuracy_score_dame had been used and tested only without undefined because in the first paper was deleted, now accuracy_score_dame has been rewritten to give support to vectors using undefined
* TODO Revisar a mano todas las medidas de precision y error de los tests: accuracy, precision, f1score, recall, errors, ...
- State "DONE"       from "TODO"       [2022-10-04 mar 21:38]
* DONE Comprobar que no se llama al dataset de Lucia&Helena desde los tests a menos que solicite descarga
* DONE Introducir en orig2.py los procesamientos de files/names/names_tests que sean necesarios
  - State "DONE"       from "TODO"       [2023-01-06 vie 12:57]
Por ejemplo pasar un fichero de formato stata a csv:
     data = pd.io.stata.read_stata(path)
     data.to_csv(path+'.csv')
     
* DONE Eliminar de los dataset inter las iniciales.
- State "DONE"       from "TODO"       [2022-10-22 sáb 08:12]

En el dataset inter se ha dado género a nombres como A. o J.M. esto es claramente un error
aunque vengan en los datasets nacionales mientras tengan en el dataset nacional menos de 100
no lo debemos considerar y, sobre todo no para los internacionales va a ser muy común encontrar
el string "A " o "A." y siempre van a ser iniciales de nombres sobre todo si lo encontramos
como primer nombre

He creado un script:
+ [ ] files/names/names_inter/remove-initials.sh

* TODO Escribir los scripts de demostración de las reglas del lenguaje
Por ejemplo, el primer nombre estricto en "Jose Antonio" sería "Jose" es el que determina el
nombre en los países de nombres derivados del latín.
* TODO Ver qué ocurre con el nombre "ANDRÉ-JEAN" del dataset inter
No funciona bien el name_frec, ni guess. Podría ser un tema acento o el tratamiento del guión
* DONE Escribir nuevo argumento para csv2gender.py
- State "DONE"       from "TODO"       [2022-11-10 jue 17:47]
--first-name-strict-if-unknow
Si hay un nombre compuesto predecir desde el primer nombre que es el primer string
si solo si el nombre compuesto no existe en la base de datos

Hecho con --guess_with_first_name_strict
* TODO Revisar todo lo hablado en el paper con una versión más moderna de Damegender
Podría ser ya la versión 0.5. Puedes buscar en el paper:
"To make easy to reproduce the experiment we are pasting the commands
used with the version 0.3.4 of Damegender."
* TODO Corroborar que los nombres escrapeados están bien con alguna api de género
** TODO Brazil 
Dataset situado en:
+ [ ] files/names/names_br/nomes2.csv
Licencia:
+ [ ] BY-SA: https://creativecommons.org/licenses/by-sa/4.0/
+ [ ] Extraida de: https://brasil.io/dataset/genero-nomes/nomes/ 
** TODO China
*** TODO Aprender a transformar caracteres chinos a latinos
* TODO Repensar el regenerate-inter-files.sh
La idea sería ir generando merges por lenguas a países de manera que
se almacenarán esos datasets de idiomas (español, francés, inglés, ...)

Y, finalmente juntar todas las lenguas.

Sería bueno que estuvieran los principales idiomas de todos los países del
mundo. Generalmente, los nombres y apellidos se asocian más a idiomas que
a países. Esto se puede demostrar también.
* TODO Hacer un dataset de unknows
Por ejemplo, generar strings de consonantes sin sílabas, strings de una letra, o nombres clasificados por científicos como unknow.
* TODO Mejorar nameincountries
Ahora mismo solo funciona namdict
Se podría usar name_frec de manera que para cada país investiga si es mayor que 0 y concatena el país con la frecuencia
* TODO Escribir funcionalidades gitcoin
Hay muchas funcionalidades de DameGender (python+bash) que pueden ser deseadas por los usuarios de la web (nodejs)
Apuntamos unas cuantas para ponerles un precio por si hay gente interesada en pagar eso.
** TODO nameincountries (1500€)
Dado un nombre en el buscador desplegar países que lo usan y frecuencia de personas usándolo en cada país.
** TODO Machine Learning (2000€)
Dado un nombre no encontrado en el INTER forzar una respuesta DameGender al género utilizando Machine Learning
** TODO CSV2GENDER (2000€)
Dado un dataset csv con una columna de primer nombre y quizás otras columnas de segundos nombres y/o apellidos devolver un nuevo csv y/o json con género otorgado por Damegender
** TODO Accuracy (2000€)
Dado dos datasets que cada cual tiene al menos primer nombre y género y donde uno lo nombramos como test y otro como guess devolver:
+ Accuracy
+ Precision
+ F1Score
** TODO Confusion Matrix (2000€)
Dado dos datasets que cada cual tiene al menos primer nombre y género y donde uno lo nombramos como test y otro como guess devolver:
+ Matriz de Confusión
** TODO git2gender (2000€)
Dado una url de un repositorio GIT devolver el número de hombres y mujeres que tienes autoría en el código
** TODO newspaper2gender (2000€)
Dada una url de una noticia de periódico devolver el número de hombres y mujeres que tienen autoría
** TODO top (5000 €)
Sacar un listado de cada país con dataset oficiales dónde haya los 10-100-1000 nombres más utilizados pudiendo hacer filtrado de género (masculinos, femeninos, ambos)
** TODO surname (3000 €)
Crear una caja de búsqueda que dado un apellido detecte la presencia en países y el número de personas otorgando la fuente de datos (ej: Wikipedia, Estadísticas Oficiales)
** TODO startwith con ajax (2000 €)
Según va escribiendo en la caja de búsqueda ir autocompletando con posibles nombres al estilo Google
** TODO csv2jsonapirest (2000€)
Dado un csv, por ejemplo, el INTER dataset generar ficheros json con uno o más nombres cada uno y devolver ese conjuto de ficheros comprimido en un .zip
** TODO percentage2names (2000€)
Para personas que quieran conocer deminombres, esto es, buscar nombres en base a porcentajes de masculinidad y feminidad habría que crear un formulario dando como parámetros masculinidad máxima y mínima, feminidad máxima y mínima y origen nacional del nombre
** TODO infofeatures o las reglas del lenguaje (10000€)
Dado un origen nacional o lengua desplegar información estadística acerca de las reglas de ese conjunto de nombres. Debería dar la información explicativa de los n-gramas y las características más significativas con PCA
* TODO Checklist a cada csv de un país
** TODO Cada row es un nombre
+ [ ] Se han eliminado todo tipo de comentarios, cabeceras y footers
*** TODO No hay nombres que tengan como primer nombre una inicial. Las iniciales pueden aparecer con punto o sin punto
def initial_letters(self, s):
*** TODO No hay nombres que no se puedan pronunciar. Debería haber al menos una vocal en casi todos los idiomas.
a|e|i|o|u|y in string
def only_consonants_in_string(self, s):
*** TODO No hay rows con nombres vacíos
*** TODO No hay dos veces el mismo nombre en un dataset
def detect_duplicated
** TODO Con respecto a columnas y filas
*** TODO El número de columnas es el mismo en todas las filas
def csv_with_same_columns
*** TODO En cada row nombre y frecuencia aparecen en las mismas posiciones
def only_string_in_column
def only_integer_in_column
*** TODO En cada row nombre y apellido están siempre en las mismas posiciones
def num_surnames_know_in_list
def num_names_know_in_list

Un caso de interés para pruebas es files/names/names_tests/funcionarios.csv donde están realmente mezclados ocupando los nombres la posición de los apellidos y, al revés.

* DONE Deploy most used names in damegender-web
Visit https://damegender.davidam.com/top.html
* TODO Make the accuracy between Portuguese language and Brazil country
  SCHEDULED: <2023-01-10 mar>
* TODO Tomando cada dataset oficial como dataset guess entender el sesgo nacional
** TODO csv2gender con el dataset INTER
** TODO accuracy pensando que INTER es guess y el dataset oficial es test

* TODO HIPÓTESIS 1
Los sesgos que se generan en idiomas o países (casos como Andrea, Jaime, ...) son de poco interés significativo respecto a utilizar un dataset INTER.

* TODO HIPÓTESIS 2
Los sesgos que se generan por efecto Lesley son también de poco interés significativo

* TODO HIPÓTESIS 3
El sesgo de error de utilizar un dataset INTER en vez de detectar y aplicar el idioma o nación local es del 10%

* TODO HIPÓTESIS 4
Un dataset INTER construido únicamente con datasets de WikiData tendría un menor acierto que uno construido con instituciones estadísticas Open Data. 
Esto sería así por un menor número de nombres y no por un desacierto de género y nombre.

* TODO HIPÓTESIS 5
El dataset de Estados Unidos es el dataset-nación que mejor funciona debido al alto número de nombres y, no por cuestiones de calidad en el resto de instituciones estadísticas.

* TODO HIPÓTESIS 6
Haciendo crecer el dataset en número de nombres de, por ejemplo, Estados Unidos con otros países quizás incluso aleatoriamente la mejora del accuracy sería muy significativa hasta 200.000 nombres y, luego débilmente desde 300.000

* TODO HIPÓTESIS 7
Si el dataset tiene más de 1.000.000 nombres reales con el género bien asignado, las mejoras de accuracy no vendría de un mayor número de nombres con el género bien asignado.

** Comentarios a la hipótesis
Este principio, pararía posibles tendencias de la industria de hacer márketing aumentando número de nombres como indicador de calidad de la herramienta, en vez de accuracy. Puesto que pasado el millón de nombres tal vez hay un efecto contrario que se está asignando género a no nombres, incluso a veces strings impronunciables (solo consonantes). 

En el caso que un cliente o usuario demande un género a una cadena de caracteres que no esté contenido en el millón de nombres podría decirse no está en la base de datos y, mediante ML inferir el género.

* TODO HIPÓTESIS 8
Las naciones con un mismo idioma tienen variaciones poco significativas con respecto a la asignación de género y nombre con respecto un dataset INTER de lengua específica construido con datasets de estadísticas oficiales o wikidata.

** Comentarios a la hipótesis
Este principio, permitiría medir la veracidad de un scraping a un dataset de fuente estadística oficial, por ejemplo.

* TODO username2gender.py
Esto se usa mucho en estudio tipo Twitter. Con DameGender se podría hacer de la siguiente manera:
1. Eliminar todos los caracteres que no sean del alfabeto del lado izquierdo de la cadena dada como username
2. Encontrar la cadena máxima de caracteres hacia la derecha de las posibles que hacen match con nombres del dataset de nombres
3. Inferir el género
* DONE Translate the preprint (uc3m.tex) to spanish (uc3m.es.tex)
  SCHEDULED: <2023-07-17 lun>
  - State "DONE"       from "TODO"       [2023-07-17 lun 06:40]
